{"title":"Lab Session 1: Python's Scientific Stack","markdown":{"yaml":{"title":"Lab Session 1: Python's Scientific Stack","jupyter":"python3"},"headingText":"Excercise 1: The Core Trio - `NumPy`, `Matplotlib`, and `SymPy`","containsRefs":false,"markdown":"\n\n>**Aim**\n\nThis session introduces the fundamental libraries that make `Python` a powerhouse for engineering.\n\n\n**Objective:** To get comfortable creating arrays, plotting data, and performing symbolic calculations.\n\n### Python basics- Recap\n\n:::{.callout-note}\n### Starting `Python` coding with `colab`\n\nYou can complete your experiments using `colab`- A cloud jupyter notebook. Please use the following link to run `Python` code in colab.\n<https://colab.google/> (Right click and open in a new tab)\n\n:::\n\n#### Hello World\n\nThe classic first program for any language.\n```{python}\nprint(\"Hello, B.Tech Students!\")\n```\n\n#### Variables and Data Types\nIntroduction to different data types like integers, floats, and strings.\n```{python}\nx = 10  # Integer\ny = 3.5  # Float\nname = \"Python\"  # String\nis_student = True  # Boolean\n\nprint(x, y, name, is_student)\n```\n#### Conditional Statements\n\nUsing if, elif, and else statements.\n```{python}\nx = 10  # Integer\nif x>5:\n    print(\"x is greater than 5\")\nelif x==5:\n    print(\"x is 5\")\nelse:\n    print(\"x is less than 5\")\n```\n#### Loops/ Iteratives\n\nUsing `for` and `while` loops.\n\n```{python}\n# For loop\nfor i in range(5):\n    print(\"Iteration:\", i)\n```\n\n```{python}\n# While loop\nn = 0\nwhile n < 3:\n    print(\"While loop iteration:\", n)\n    n += 1\n```\n#### Functions\n\nDefining and calling functions.\n```{python}\ndef add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 3)\nprint(\"Sum:\", result)\n```\n#### Basic Numerical Computations using `NumPy`\n\n`NumPy` is useful for numerical operations.\n```{python}\n#Solve 2x+3y=54x+4y=6\nimport numpy as np\n\nA = np.array([[2, 3], [4, 4]])\nb = np.array([5, 6])\n\nx = np.linalg.solve(A, b)\nprint(\"Solution:\", x)\n```\n#### Plotting Graphs with Matplotlib\n\nMatplotlib is used for simple visualizations.\nInstall using: `pip install matplotlib`\n```{python}\n#Plotting a sine wave \nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"sin(x)\")\nplt.title(\"Sine Wave\")\nplt.show()\n```\n```{python}\n#| label: fig-rc-circuit\n#| fig-cap: \"Voltage across a charging capacitor in an RC circuit.\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nVs = 5.0  # Source voltage (Volts)\nR = 1000  # Resistance (Ohms)\nC = 1e-6  # Capacitance (Farads)\ntau = R * C # Time constant\n\n# Create a time vector from 0 to 5*tau\nt = np.linspace(0, 5 * tau, 100)\n\n# Calculate voltage using the formula\nVc = Vs * (1 - np.exp(-t / tau))\n\n# Plotting the result\nplt.figure(figsize=(8, 5))\nplt.plot(t, Vc, label=f'RC = {tau}s')\nplt.title('Capacitor Charging Voltage')\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.grid(True)\nplt.legend()\nplt.show()\n```\n\n####  Solution of PDE Using SciPy\n\n`SciPy` provides numerical solvers for differential equations and optimizations.\n\n:::{.callout-note}\n### Installing `Scipy`\n\nThe `Scipy` library can be installed using the  `pip install scipy` command in terminal or using `!pip install scipy` in colab.\n:::\n\n```{python}\n\n#Solving a Simple PDE ∂u/∂x + ∂u/∂t=0\nfrom sympy import symbols, Function, Eq, Derivative, pdsolve\n\n# Define variables\nx, t = symbols('x t')\nu = Function('u')(x, t)\n\n# Define a simple PDE: ∂u/∂x + ∂u/∂t = 0\npde = Eq(Derivative(u, x) + Derivative(u, t), 0)\n\n# Solve the PDE using pdsolve\nsolution = pdsolve(pde)\n# Print the solution\nprint(solution)\n```\n\n```{python}\n#| label: fig-minimum-quadratic\n#| fig-cap: \"Solution of PDE.\"\n\n# Example: Solving an ODE as an approximation for a PDE\nfrom scipy.integrate import solve_ivp\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef pde_rhs(t, u):\n    return -0.5 * u  # Example equation\n\nsol = solve_ivp(pde_rhs, [0, 10], [1], t_eval=np.linspace(0, 10, 100))\nplt.plot(sol.t, sol.y[0])\nplt.xlabel('Time')\nplt.ylabel('Solution')\nplt.show()\n```\n\n\n#### Basic Optimization Using `SymPy`\n\n`SymPy` is a symbolic mathematics library that can be used to derive analytical solutions to PDEs.\n\n\n```{python}\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    return x**2 + 2*x + 1\n\nresult = minimize(objective, 0)  # Start search at x=0\nprint(\"Optimal x:\", result.x)\n```\n\n\n## Practice tasks\n\n### T-1: Representing an Analog Signal\n\n**Concept:** In electronics, continuous analog signals (like AC voltage) are sampled at discrete time intervals to be processed by a digital system (like a microcontroller or computer). A `NumPy` array is the perfect way to store these sampled values.\n\n**Python Skills:**\n*   `np.linspace()`: To create an array of evenly spaced time points.\n*   `np.sin()`: An element-wise function that applies the sine function to every value in an array.\n\n**Task:** Generate and plot a 50 Hz sine wave voltage signal with a peak voltage of 5V, sampled for 3 cycles.\n\n\n```{python}\n#| label: fig-sine-wave\n#| fig-cap: \"A 5V, 50 Hz sine wave sampled over time.\"\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# --- Parameters ---\nfrequency = 50  # Hz\npeak_voltage = 5.0  # Volts\ncycles = 3\nsampling_rate = 1000 # Samples per second\n\n# --- Time Array Generation ---\n# Duration of 3 cycles is 3 * (1/frequency)\nduration = cycles / frequency \n# Create 1000 points per second * duration\nnum_samples = int(sampling_rate * duration)\nt = np.linspace(0, duration, num_samples)\n\n# --- Signal Generation ---\n# The formula for a sine wave is V(t) = V_peak * sin(2 * pi * f * t)\nvoltage = peak_voltage * np.sin(2 * np.pi * frequency * t)\n\n# --- Visualization ---\nplt.figure(figsize=(10, 4))\nplt.plot(t, voltage)\nplt.title('Digital Representation of a 50 Hz Sine Wave')\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.grid(True)\nplt.show()\n```\n\n\n### T-2: Modeling a Noisy Sensor Reading\n\n**Concept:** Real-world sensor data is never perfect. It's often corrupted by random noise. We can simulate this by adding a random component to our ideal signal.\n\n**Python Skills:**\n- Array Addition: Simply using + to add two arrays of the same shape.\n\n- `np.random.normal()`: To generate Gaussian noise, which is a common model for electronic noise.\n\n**Task:** Take the 5V sine wave from the previous example and add Gaussian noise with a standard deviation of 0.5V to simulate a noisy sensor reading.\n\n```{python}\n#| label: fig-noisy-signal\n#| fig-cap: \"Ideal sine wave vs. a simulated noisy sensor reading.\"\n\n# We can reuse the 't' and 'voltage' arrays from the previous example\nnoise_amplitude = 0.5 # Standard deviation of the noise in Volts\n\n# Generate noise with the same shape as our voltage array\nnoise = np.random.normal(0, noise_amplitude, voltage.shape)\n\n# Create the noisy signal by adding the noise to the ideal signal\nnoisy_voltage = voltage + noise\n\n# --- Visualization ---\nplt.figure(figsize=(10, 4))\nplt.plot(t, voltage, label='Ideal Signal', linestyle='--')\nplt.plot(t, noisy_voltage, label='Noisy Sensor Reading', alpha=0.75)\nplt.title('Ideal vs. Noisy Signal')\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n### T-3: Forward Kinematics of a 2-Link Robot Arm\n\n\n**Concept:** Forward kinematics in robotics is the process of calculating the position of the robot's end-effector (e.g., its gripper) based on its joint angles. For a simple 2D arm, this involves basic trigonometry.\n\n**Python Skills:**\n\n- Using arrays to represent vectors (link lengths).\n- Using scalar variables for parameters (joint angles).\n- Basic arithmetic and trigonometric functions (`np.cos`, `np.sin`, `np.deg2rad`).\n\n**Task:** Calculate and plot the position of a 2-link planar robot arm with link lengths L1=1.0m and L2=0.7m for given joint angles theta1=30° and theta2=45°.\n\n```{python}\n#| label: fig-robot-arm\n#| fig-cap: \"Position of a 2-link robot arm using forward kinematics.\"\n\n# --- Parameters ---\nL1 = 1.0  # Length of link 1\nL2 = 0.7  # Length of link 2\ntheta1_deg = 30\ntheta2_deg = 45\n\n# Convert angles to radians for numpy's trig functions\ntheta1 = np.deg2rad(theta1_deg)\ntheta2 = np.deg2rad(theta2_deg)\n\n# --- Kinematics Calculations ---\n# Position of the first joint (end of L1)\nx1 = L1 * np.cos(theta1)\ny1 = L1 * np.sin(theta1)\n\n# Position of the end-effector (end of L2) relative to the first joint\n# The angle of the second link is theta1 + theta2\nx2 = x1 + L2 * np.cos(theta1 + theta2)\ny2 = y1 + L2 * np.sin(theta1 + theta2)\n\n# --- Visualization ---\nplt.figure(figsize=(6, 6))\n# Plot the arm links\nplt.plot([0, x1], [0, y1], 'r-o', linewidth=3, markersize=10, label='Link 1')\nplt.plot([x1, x2], [y1, y2], 'b-o', linewidth=3, markersize=10, label='Link 2')\n\n# Plot the base and end-effector positions for clarity\nplt.plot(0, 0, 'ko', markersize=15, label='Base')\nplt.plot(x2, y2, 'gX', markersize=15, label='End-Effector')\n\nplt.title('2-Link Robot Arm Kinematics')\nplt.xlabel('X Position (m)')\nplt.ylabel('Y Position (m)')\nplt.grid(True)\nplt.axis('equal') # Important for correct aspect ratio\nplt.legend()\nplt.show()\n\nprint(f\"End-effector is at position: ({x2:.2f}, {y2:.2f})\")\n```\n\n### T-4: Rotating a Sensor's Coordinate Frame\n\n**Concept:** A robot often has sensors (like a camera or a Lidar) mounted at an angle. To understand the sensor data in the robot's own coordinate frame, we need to rotate the data points. This is a fundamental operation in robotics and computer vision, done using a rotation matrix.\n\n**Python Skills:**\n\n- Creating a 2D NumPy array (a matrix).\n- Matrix multiplication using the `@ `operator.\n\n- Transposing an array (`.T`) for correct multiplication dimensions.\n\n**Task:** A sensor detects an object at coordinates (2, 0) in its own frame. The sensor is rotated 45 degrees counter-clockwise relative to the robot's base. Find the object's coordinates in the robot's frame.\n\n```{python}\n#| label: fig-rotation\n#| fig-cap: \"Rotating a point from a sensor's frame to the robot's frame.\"\n\n# Angle of the sensor relative to the robot\nangle_deg = 45\nangle_rad = np.deg2rad(angle_deg)\n\n# Point detected in the sensor's frame [x, y]\np_sensor = np.array([[2], [0]]) # As a column vector\n\n# 2D Rotation Matrix\n# R = [[cos(theta), -sin(theta)],\n#      [sin(theta),  cos(theta)]]\nR = np.array([[np.cos(angle_rad), -np.sin(angle_rad)],\n              [np.sin(angle_rad),  np.cos(angle_rad)]])\n\n# The transformation: p_robot = R @ p_sensor\np_robot = R @ p_sensor\n\n# --- Visualization ---\nplt.figure(figsize=(6, 6))\n# Plot sensor's axes\nplt.quiver(0, 0, np.cos(angle_rad), np.sin(angle_rad), color='r', scale=3, label=\"Sensor x'-axis\")\nplt.quiver(0, 0, -np.sin(angle_rad), np.cos(angle_rad), color='g', scale=3, label=\"Sensor y'-axis\")\n\n# Plot the point in the robot's frame\nplt.plot(p_robot[0], p_robot[1], 'bo', markersize=10, label='Point in Robot Frame')\n# For context, let's show where the point was in the sensor's frame (if it weren't rotated)\n# This is just for visualization\nplt.plot(p_sensor[0], p_sensor[1], 'ko', markersize=10, alpha=0.5, label='Original point (relative to axes)')\n\n\nplt.axhline(0, color='black', linewidth=0.5)\nplt.axvline(0, color='black', linewidth=0.5)\nplt.grid(True)\nplt.axis('equal')\nplt.xlim(-1, 3)\nplt.ylim(-1, 3)\nplt.title(\"Coordinate Frame Rotation\")\nplt.xlabel(\"Robot X-axis\")\nplt.ylabel(\"Robot Y-axis\")\nplt.legend()\nplt.show()\n\nprint(\"Rotation Matrix:\\n\", np.round(R, 2))\nprint(f\"\\nPoint in Sensor Frame: {p_sensor.flatten()}\")\nprint(f\"Point in Robot Frame:  {np.round(p_robot.flatten(), 2)}\")\n```\n\n### T-5: Applying a Simple Digital Filter\n\n**Concept:** To clean up the noisy signal from Example 3, we can apply a digital filter. The simplest is a moving average filter, which replaces each data point with the average of itself and its neighbors. This smooths out sharp fluctuations (noise).\n\n**Python Skills:**\n\n- Looping over an array.\n- Array slicing: array[start:end].\n- `np.mean()`: To calculate the average of a set of numbers.\n\n**Task:** Apply a 5-point moving average filter to the noisy_voltage signal created in Example 3 and plot the result to see the smoothing effect.\n\n```{python}\n#| label: fig-filtered-signal\n#| fig-cap: \"Noisy signal smoothed using a 5-point moving average filter.\"\n\n# Let's regenerate the noisy signal for a self-contained example\n# (In a real notebook, you would reuse the variable from before)\nfrequency = 50\npeak_voltage = 5.0\nduration = 3 / frequency\nt = np.linspace(0, duration, int(1000 * duration))\nvoltage = peak_voltage * np.sin(2 * np.pi * frequency * t)\nnoise = np.random.normal(0, 0.5, voltage.shape)\nnoisy_voltage = voltage + noise\n\n# --- Filtering ---\nwindow_size = 5\n# Create an empty array to store the filtered signal\nfiltered_voltage = np.zeros_like(noisy_voltage)\n\n# Loop through the signal. We can't compute a full window at the very edges,\n# so we'll just copy the original values for the first and last few points.\nfor i in range(len(noisy_voltage)):\n    # Find the start and end of the slice\n    start = max(0, i - window_size // 2)\n    end = min(len(noisy_voltage), i + window_size // 2 + 1)\n    \n    # Get the window of data and calculate its mean\n    window = noisy_voltage[start:end]\n    filtered_voltage[i] = np.mean(window)\n\n# --- Visualization ---\nplt.figure(figsize=(10, 4))\nplt.plot(t, noisy_voltage, label='Noisy Signal', alpha=0.5)\nplt.plot(t, filtered_voltage, label='Filtered Signal', color='r', linewidth=2)\nplt.title('Effect of Moving Average Filter')\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n\n\n","srcMarkdownNoYaml":"\n\n>**Aim**\n\nThis session introduces the fundamental libraries that make `Python` a powerhouse for engineering.\n\n## Excercise 1: The Core Trio - `NumPy`, `Matplotlib`, and `SymPy`\n\n**Objective:** To get comfortable creating arrays, plotting data, and performing symbolic calculations.\n\n### Python basics- Recap\n\n:::{.callout-note}\n### Starting `Python` coding with `colab`\n\nYou can complete your experiments using `colab`- A cloud jupyter notebook. Please use the following link to run `Python` code in colab.\n<https://colab.google/> (Right click and open in a new tab)\n\n:::\n\n#### Hello World\n\nThe classic first program for any language.\n```{python}\nprint(\"Hello, B.Tech Students!\")\n```\n\n#### Variables and Data Types\nIntroduction to different data types like integers, floats, and strings.\n```{python}\nx = 10  # Integer\ny = 3.5  # Float\nname = \"Python\"  # String\nis_student = True  # Boolean\n\nprint(x, y, name, is_student)\n```\n#### Conditional Statements\n\nUsing if, elif, and else statements.\n```{python}\nx = 10  # Integer\nif x>5:\n    print(\"x is greater than 5\")\nelif x==5:\n    print(\"x is 5\")\nelse:\n    print(\"x is less than 5\")\n```\n#### Loops/ Iteratives\n\nUsing `for` and `while` loops.\n\n```{python}\n# For loop\nfor i in range(5):\n    print(\"Iteration:\", i)\n```\n\n```{python}\n# While loop\nn = 0\nwhile n < 3:\n    print(\"While loop iteration:\", n)\n    n += 1\n```\n#### Functions\n\nDefining and calling functions.\n```{python}\ndef add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 3)\nprint(\"Sum:\", result)\n```\n#### Basic Numerical Computations using `NumPy`\n\n`NumPy` is useful for numerical operations.\n```{python}\n#Solve 2x+3y=54x+4y=6\nimport numpy as np\n\nA = np.array([[2, 3], [4, 4]])\nb = np.array([5, 6])\n\nx = np.linalg.solve(A, b)\nprint(\"Solution:\", x)\n```\n#### Plotting Graphs with Matplotlib\n\nMatplotlib is used for simple visualizations.\nInstall using: `pip install matplotlib`\n```{python}\n#Plotting a sine wave \nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"sin(x)\")\nplt.title(\"Sine Wave\")\nplt.show()\n```\n```{python}\n#| label: fig-rc-circuit\n#| fig-cap: \"Voltage across a charging capacitor in an RC circuit.\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nVs = 5.0  # Source voltage (Volts)\nR = 1000  # Resistance (Ohms)\nC = 1e-6  # Capacitance (Farads)\ntau = R * C # Time constant\n\n# Create a time vector from 0 to 5*tau\nt = np.linspace(0, 5 * tau, 100)\n\n# Calculate voltage using the formula\nVc = Vs * (1 - np.exp(-t / tau))\n\n# Plotting the result\nplt.figure(figsize=(8, 5))\nplt.plot(t, Vc, label=f'RC = {tau}s')\nplt.title('Capacitor Charging Voltage')\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.grid(True)\nplt.legend()\nplt.show()\n```\n\n####  Solution of PDE Using SciPy\n\n`SciPy` provides numerical solvers for differential equations and optimizations.\n\n:::{.callout-note}\n### Installing `Scipy`\n\nThe `Scipy` library can be installed using the  `pip install scipy` command in terminal or using `!pip install scipy` in colab.\n:::\n\n```{python}\n\n#Solving a Simple PDE ∂u/∂x + ∂u/∂t=0\nfrom sympy import symbols, Function, Eq, Derivative, pdsolve\n\n# Define variables\nx, t = symbols('x t')\nu = Function('u')(x, t)\n\n# Define a simple PDE: ∂u/∂x + ∂u/∂t = 0\npde = Eq(Derivative(u, x) + Derivative(u, t), 0)\n\n# Solve the PDE using pdsolve\nsolution = pdsolve(pde)\n# Print the solution\nprint(solution)\n```\n\n```{python}\n#| label: fig-minimum-quadratic\n#| fig-cap: \"Solution of PDE.\"\n\n# Example: Solving an ODE as an approximation for a PDE\nfrom scipy.integrate import solve_ivp\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef pde_rhs(t, u):\n    return -0.5 * u  # Example equation\n\nsol = solve_ivp(pde_rhs, [0, 10], [1], t_eval=np.linspace(0, 10, 100))\nplt.plot(sol.t, sol.y[0])\nplt.xlabel('Time')\nplt.ylabel('Solution')\nplt.show()\n```\n\n\n#### Basic Optimization Using `SymPy`\n\n`SymPy` is a symbolic mathematics library that can be used to derive analytical solutions to PDEs.\n\n\n```{python}\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    return x**2 + 2*x + 1\n\nresult = minimize(objective, 0)  # Start search at x=0\nprint(\"Optimal x:\", result.x)\n```\n\n\n## Practice tasks\n\n### T-1: Representing an Analog Signal\n\n**Concept:** In electronics, continuous analog signals (like AC voltage) are sampled at discrete time intervals to be processed by a digital system (like a microcontroller or computer). A `NumPy` array is the perfect way to store these sampled values.\n\n**Python Skills:**\n*   `np.linspace()`: To create an array of evenly spaced time points.\n*   `np.sin()`: An element-wise function that applies the sine function to every value in an array.\n\n**Task:** Generate and plot a 50 Hz sine wave voltage signal with a peak voltage of 5V, sampled for 3 cycles.\n\n\n```{python}\n#| label: fig-sine-wave\n#| fig-cap: \"A 5V, 50 Hz sine wave sampled over time.\"\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# --- Parameters ---\nfrequency = 50  # Hz\npeak_voltage = 5.0  # Volts\ncycles = 3\nsampling_rate = 1000 # Samples per second\n\n# --- Time Array Generation ---\n# Duration of 3 cycles is 3 * (1/frequency)\nduration = cycles / frequency \n# Create 1000 points per second * duration\nnum_samples = int(sampling_rate * duration)\nt = np.linspace(0, duration, num_samples)\n\n# --- Signal Generation ---\n# The formula for a sine wave is V(t) = V_peak * sin(2 * pi * f * t)\nvoltage = peak_voltage * np.sin(2 * np.pi * frequency * t)\n\n# --- Visualization ---\nplt.figure(figsize=(10, 4))\nplt.plot(t, voltage)\nplt.title('Digital Representation of a 50 Hz Sine Wave')\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.grid(True)\nplt.show()\n```\n\n\n### T-2: Modeling a Noisy Sensor Reading\n\n**Concept:** Real-world sensor data is never perfect. It's often corrupted by random noise. We can simulate this by adding a random component to our ideal signal.\n\n**Python Skills:**\n- Array Addition: Simply using + to add two arrays of the same shape.\n\n- `np.random.normal()`: To generate Gaussian noise, which is a common model for electronic noise.\n\n**Task:** Take the 5V sine wave from the previous example and add Gaussian noise with a standard deviation of 0.5V to simulate a noisy sensor reading.\n\n```{python}\n#| label: fig-noisy-signal\n#| fig-cap: \"Ideal sine wave vs. a simulated noisy sensor reading.\"\n\n# We can reuse the 't' and 'voltage' arrays from the previous example\nnoise_amplitude = 0.5 # Standard deviation of the noise in Volts\n\n# Generate noise with the same shape as our voltage array\nnoise = np.random.normal(0, noise_amplitude, voltage.shape)\n\n# Create the noisy signal by adding the noise to the ideal signal\nnoisy_voltage = voltage + noise\n\n# --- Visualization ---\nplt.figure(figsize=(10, 4))\nplt.plot(t, voltage, label='Ideal Signal', linestyle='--')\nplt.plot(t, noisy_voltage, label='Noisy Sensor Reading', alpha=0.75)\nplt.title('Ideal vs. Noisy Signal')\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n### T-3: Forward Kinematics of a 2-Link Robot Arm\n\n\n**Concept:** Forward kinematics in robotics is the process of calculating the position of the robot's end-effector (e.g., its gripper) based on its joint angles. For a simple 2D arm, this involves basic trigonometry.\n\n**Python Skills:**\n\n- Using arrays to represent vectors (link lengths).\n- Using scalar variables for parameters (joint angles).\n- Basic arithmetic and trigonometric functions (`np.cos`, `np.sin`, `np.deg2rad`).\n\n**Task:** Calculate and plot the position of a 2-link planar robot arm with link lengths L1=1.0m and L2=0.7m for given joint angles theta1=30° and theta2=45°.\n\n```{python}\n#| label: fig-robot-arm\n#| fig-cap: \"Position of a 2-link robot arm using forward kinematics.\"\n\n# --- Parameters ---\nL1 = 1.0  # Length of link 1\nL2 = 0.7  # Length of link 2\ntheta1_deg = 30\ntheta2_deg = 45\n\n# Convert angles to radians for numpy's trig functions\ntheta1 = np.deg2rad(theta1_deg)\ntheta2 = np.deg2rad(theta2_deg)\n\n# --- Kinematics Calculations ---\n# Position of the first joint (end of L1)\nx1 = L1 * np.cos(theta1)\ny1 = L1 * np.sin(theta1)\n\n# Position of the end-effector (end of L2) relative to the first joint\n# The angle of the second link is theta1 + theta2\nx2 = x1 + L2 * np.cos(theta1 + theta2)\ny2 = y1 + L2 * np.sin(theta1 + theta2)\n\n# --- Visualization ---\nplt.figure(figsize=(6, 6))\n# Plot the arm links\nplt.plot([0, x1], [0, y1], 'r-o', linewidth=3, markersize=10, label='Link 1')\nplt.plot([x1, x2], [y1, y2], 'b-o', linewidth=3, markersize=10, label='Link 2')\n\n# Plot the base and end-effector positions for clarity\nplt.plot(0, 0, 'ko', markersize=15, label='Base')\nplt.plot(x2, y2, 'gX', markersize=15, label='End-Effector')\n\nplt.title('2-Link Robot Arm Kinematics')\nplt.xlabel('X Position (m)')\nplt.ylabel('Y Position (m)')\nplt.grid(True)\nplt.axis('equal') # Important for correct aspect ratio\nplt.legend()\nplt.show()\n\nprint(f\"End-effector is at position: ({x2:.2f}, {y2:.2f})\")\n```\n\n### T-4: Rotating a Sensor's Coordinate Frame\n\n**Concept:** A robot often has sensors (like a camera or a Lidar) mounted at an angle. To understand the sensor data in the robot's own coordinate frame, we need to rotate the data points. This is a fundamental operation in robotics and computer vision, done using a rotation matrix.\n\n**Python Skills:**\n\n- Creating a 2D NumPy array (a matrix).\n- Matrix multiplication using the `@ `operator.\n\n- Transposing an array (`.T`) for correct multiplication dimensions.\n\n**Task:** A sensor detects an object at coordinates (2, 0) in its own frame. The sensor is rotated 45 degrees counter-clockwise relative to the robot's base. Find the object's coordinates in the robot's frame.\n\n```{python}\n#| label: fig-rotation\n#| fig-cap: \"Rotating a point from a sensor's frame to the robot's frame.\"\n\n# Angle of the sensor relative to the robot\nangle_deg = 45\nangle_rad = np.deg2rad(angle_deg)\n\n# Point detected in the sensor's frame [x, y]\np_sensor = np.array([[2], [0]]) # As a column vector\n\n# 2D Rotation Matrix\n# R = [[cos(theta), -sin(theta)],\n#      [sin(theta),  cos(theta)]]\nR = np.array([[np.cos(angle_rad), -np.sin(angle_rad)],\n              [np.sin(angle_rad),  np.cos(angle_rad)]])\n\n# The transformation: p_robot = R @ p_sensor\np_robot = R @ p_sensor\n\n# --- Visualization ---\nplt.figure(figsize=(6, 6))\n# Plot sensor's axes\nplt.quiver(0, 0, np.cos(angle_rad), np.sin(angle_rad), color='r', scale=3, label=\"Sensor x'-axis\")\nplt.quiver(0, 0, -np.sin(angle_rad), np.cos(angle_rad), color='g', scale=3, label=\"Sensor y'-axis\")\n\n# Plot the point in the robot's frame\nplt.plot(p_robot[0], p_robot[1], 'bo', markersize=10, label='Point in Robot Frame')\n# For context, let's show where the point was in the sensor's frame (if it weren't rotated)\n# This is just for visualization\nplt.plot(p_sensor[0], p_sensor[1], 'ko', markersize=10, alpha=0.5, label='Original point (relative to axes)')\n\n\nplt.axhline(0, color='black', linewidth=0.5)\nplt.axvline(0, color='black', linewidth=0.5)\nplt.grid(True)\nplt.axis('equal')\nplt.xlim(-1, 3)\nplt.ylim(-1, 3)\nplt.title(\"Coordinate Frame Rotation\")\nplt.xlabel(\"Robot X-axis\")\nplt.ylabel(\"Robot Y-axis\")\nplt.legend()\nplt.show()\n\nprint(\"Rotation Matrix:\\n\", np.round(R, 2))\nprint(f\"\\nPoint in Sensor Frame: {p_sensor.flatten()}\")\nprint(f\"Point in Robot Frame:  {np.round(p_robot.flatten(), 2)}\")\n```\n\n### T-5: Applying a Simple Digital Filter\n\n**Concept:** To clean up the noisy signal from Example 3, we can apply a digital filter. The simplest is a moving average filter, which replaces each data point with the average of itself and its neighbors. This smooths out sharp fluctuations (noise).\n\n**Python Skills:**\n\n- Looping over an array.\n- Array slicing: array[start:end].\n- `np.mean()`: To calculate the average of a set of numbers.\n\n**Task:** Apply a 5-point moving average filter to the noisy_voltage signal created in Example 3 and plot the result to see the smoothing effect.\n\n```{python}\n#| label: fig-filtered-signal\n#| fig-cap: \"Noisy signal smoothed using a 5-point moving average filter.\"\n\n# Let's regenerate the noisy signal for a self-contained example\n# (In a real notebook, you would reuse the variable from before)\nfrequency = 50\npeak_voltage = 5.0\nduration = 3 / frequency\nt = np.linspace(0, duration, int(1000 * duration))\nvoltage = peak_voltage * np.sin(2 * np.pi * frequency * t)\nnoise = np.random.normal(0, 0.5, voltage.shape)\nnoisy_voltage = voltage + noise\n\n# --- Filtering ---\nwindow_size = 5\n# Create an empty array to store the filtered signal\nfiltered_voltage = np.zeros_like(noisy_voltage)\n\n# Loop through the signal. We can't compute a full window at the very edges,\n# so we'll just copy the original values for the first and last few points.\nfor i in range(len(noisy_voltage)):\n    # Find the start and end of the slice\n    start = max(0, i - window_size // 2)\n    end = min(len(noisy_voltage), i + window_size // 2 + 1)\n    \n    # Get the window of data and calculate its mean\n    window = noisy_voltage[start:end]\n    filtered_voltage[i] = np.mean(window)\n\n# --- Visualization ---\nplt.figure(figsize=(10, 4))\nplt.plot(t, noisy_voltage, label='Noisy Signal', alpha=0.5)\nplt.plot(t, filtered_voltage, label='Filtered Signal', color='r', linewidth=2)\nplt.title('Effect of Moving Average Filter')\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"01-intro-python.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","theme":"cosmo","title":"Lab Session 1: Python's Scientific Stack","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}