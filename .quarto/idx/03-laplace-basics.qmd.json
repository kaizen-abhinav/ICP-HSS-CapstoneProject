{"title":"Lab Session 3: Symbolic operations in Laplace Transform","markdown":{"yaml":{"title":"Lab Session 3: Symbolic operations in Laplace Transform","jupyter":"python3"},"headingText":"Experiment 5: The Laplace Transform and Frequency Response","containsRefs":false,"markdown":"\n\n\n\nThe Laplace Transform is a powerful mathematical tool used extensively in circuit analysis, control systems, and signal processing. It transforms a function from the time domain, $f(t)$, into the frequency domain, $F(s)$.\n\nWhile this is useful for solving differential equations, its true power in engineering comes from analyzing the **frequency response**. By setting the complex variable $s = j\\omega$ (where $j$ is the imaginary unit and $\\omega$ is angular frequency), we can see how a system or signal behaves at different frequencies. This is analyzed through two key plots: the **Magnitude Plot** and the **Phase Plot**.\n\n### Aim\nTo compute the Laplace transform of given functions and, most importantly, to visualize and interpret their frequency response through magnitude and phase plots.\n\n### Objectives\n*   To use Python's `SymPy` library for symbolic Laplace transforms.\n*   To understand how to obtain the frequency response function $F(j\\omega)$ from the Laplace transform $F(s)$.\n*   To generate and interpret magnitude and phase plots.\n*   To connect these plots to physical concepts like amplification, attenuation, and time delay (phase shift).\n\n---\n\n### Algorithm\n\n1.  **Define Symbols:** Use `sp.symbols()` to declare symbolic variables `t` (time), `s` (Laplace variable), and `w` (frequency, $\\omega$).\n2.  **Define the Function:** Specify the time-domain function $f(t)$ as a symbolic expression.\n3.  **Compute Laplace Transform:** Use `sp.laplace_transform()` to find the corresponding $F(s)$.\n4.  **Derive Frequency Response:** Substitute $s = j\\omega$ into the symbolic expression for $F(s)$ to get the frequency response function $F(j\\omega)$.\n5.  **Prepare for Plotting:** Convert the symbolic expressions for $f(t)$ and $F(j\\omega)$ into fast numerical functions using `sp.lambdify()`.\n6.  **Generate Data:**\n    *   Create a numerical array of time points `t_values`.\n    *   Create a logarithmic array of frequency points `w_values` using `np.logspace()`.\n    *   Calculate the complex values of $F(j\\omega)$ for the frequency range.\n7.  **Calculate Magnitude and Phase:**\n    *   Magnitude: `np.abs(F_jw_values)`\n    *   Phase: `np.angle(F_jw_values, deg=True)` (in degrees for easier interpretation)\n8.  **Plot:** Create three subplots: the time-domain signal, the magnitude plot (log-log scale), and the phase plot (log-x scale). This set of frequency plots is known as a **Bode Plot**.\n\n---\n\n### Case Study: An RC Low-Pass Filter's Impulse Response\n\n**Problem:** The voltage response of a simple RC low-pass filter to a sharp input (an impulse) is an exponential decay function, $f(t) = e^{-at}$, where $a = 1/RC$. Let's analyze this signal for $a=1$.\n\n**Physical Interpretation:**\n*   **Magnitude `|F(jω)|`:** Tells us how much the filter will pass or block a sine wave of frequency $\\omega$.\n*   **Phase `arg(F(jω))`:** Tells us how much the filter will delay a sine wave of frequency $\\omega$.\n\n```{python}\n#| label: fig-laplace-exp-bode\n#| fig-cap: \"Time-domain plot of an exponential decay and its corresponding Bode Plot (Magnitude and Phase).\"\n\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# --- 1. Define symbols ---\nt, s, w = sp.symbols('t s w', real=True, positive=True)\na = sp.Symbol('a', real=True, positive=True)\n\n# --- 2. Define the function ---\nf = sp.exp(-a*t)\n\n# --- 3. Compute Laplace Transform ---\nF_s = sp.laplace_transform(f, t, s, noconds=True)\n\n# --- Set parameter for our specific case ---\nf_case = f.subs(a, 1)\nF_s_case = F_s.subs(a, 1)\n\n# --- 4. Derive Frequency Response ---\nF_jw = F_s_case.subs(s, 1j * w)\n\n# --- Print the symbolic results ---\nprint(f\"Function: f(t) = {f_case}\")\nprint(f\"Laplace Transform: F(s) = {F_s_case}\")\nprint(f\"Frequency Response: F(jω) = {F_jw}\")\n\n# --- 5. Lambdify for numerical evaluation ---\nf_func = sp.lambdify(t, f_case, 'numpy')\nF_jw_func = sp.lambdify(w, F_jw, 'numpy')\n\n# --- 6. & 7. Generate Data and Calculate Mag/Phase ---\nt_values = np.linspace(0, 5, 400)\nf_values = f_func(t_values)\n\nw_values = np.logspace(-1, 2, 400) # From 0.1 to 100 rad/s\nF_jw_values = F_jw_func(w_values)\n\nmagnitude = np.abs(F_jw_values)\nphase = np.angle(F_jw_values, deg=True)\n\n# --- 8. Plotting ---\nplt.figure(figsize=(10, 8))\n\n# Plot f(t)\nplt.subplot(3, 1, 1)\nplt.plot(t_values, f_values, color='blue')\nplt.title('Time Domain: $f(t) = e^{-t}$ (Impulse Response of RC Filter)')\nplt.xlabel('Time (t)')\nplt.ylabel('Amplitude')\nplt.grid(True)\n\n# Plot Magnitude |F(jω)|\nplt.subplot(3, 1, 2)\nplt.loglog(w_values, magnitude, color='red')\nplt.title('Frequency Response: Magnitude Plot')\nplt.xlabel('Frequency (ω) [rad/s]')\nplt.ylabel('|F(jω)| (Gain)')\nplt.grid(True, which=\"both\", ls=\"-\")\n\n# Plot Phase arg(F(jω))\nplt.subplot(3, 1, 3)\nplt.semilogx(w_values, phase, color='purple')\nplt.title('Frequency Response: Phase Plot')\nplt.xlabel('Frequency (ω) [rad/s]')\nplt.ylabel('Phase (degrees)')\nplt.grid(True, which=\"both\", ls=\"-\")\n\nplt.tight_layout()\nplt.show()\n```\n\n### Results and Discussion\n\n- Time Domain: The function $e^{-t}$ shows a sharp start at 1, followed by a slow decay.\n\n- Magnitude Plot: This plot clearly shows the behavior of a low-pass filter. At low frequencies (e.g., \n$\\omega<1$), the magnitude (gain) is close to 1, meaning these signals are passed through without attenuation. As frequency increases, the magnitude rolls off, indicating that high-frequency signals are blocked. The \"corner frequency\" where the roll-off begins is at $\\omega=1/a=1$ rad/s.\n\n- Phase Plot: At very low frequencies, the phase shift is near 0 degrees. As the frequency approaches the corner frequency, the phase lag increases, reaching -45 degrees at $\\omega=1$ rad/s. At very high frequencies, the phase shift approaches -90 degrees, meaning a high-frequency sine wave passing through this filter will be delayed by a quarter of its cycle. This delay is a fundamental property of physical systems like filters.\n\n### Application Challenge 1: A Damped Oscillator\n\nYour Task: Analyze a signal representing a damped sine wave, which is characteristic of many mechanical and electrical systems that oscillate but lose energy over time (e.g., a mass on a spring with friction, or an RLC circuit). The function is given by: $f(t)=e^{-at}\\sin(\\omega t)$.\nUse the following parameters: $a = 0.5$ (Damping factor), $\\omega_0 =5$ rad/s (Natural oscillation frequency). Follow the full algorithm to produce the time-domain plot and the full Bode plot (magnitude and phase). \n\n\n>**Solution to the Application Challenge**\n\n```{python}\n#| label: fig-laplace-damped-sine\n#| fig-cap: \"Analysis of a damped sine wave, showing a resonant peak in its frequency response.\"\n\n# --- Define symbols and parameters ---\nt, s, w = sp.symbols('t s w', real=True, positive=True)\na = sp.Symbol('a', real=True, positive=True)\nw0 = sp.Symbol('w0', real=True, positive=True)\n\n# --- Define the function ---\nf_damped = sp.exp(-a*t) * sp.sin(w0*t)\n\n# --- Compute its Laplace Transform using the frequency shift theorem ---\n# The transform of e^(-at)f(t) is F(s+a)\nF_s_damped = sp.laplace_transform(sp.sin(w0*t), t, s)[0].subs(s, s + a)\n\n# --- Set parameters for our specific case ---\nparams = {a: 0.5, w0: 5}\nf_case_damped = f_damped.subs(params)\nF_s_case_damped = F_s_damped.subs(params)\n\n# --- Derive Frequency Response ---\nF_jw_damped = F_s_case_damped.subs(s, 1j * w)\n\n# --- Print the symbolic results ---\nprint(f\"Function: f(t) = {f_case_damped}\")\nprint(f\"Laplace Transform: F(s) = {sp.simplify(F_s_case_damped)}\")\nprint(f\"Frequency Response: F(jω) = {F_jw_damped}\")\n\n# --- Lambdify for numerical evaluation ---\nf_damped_func = sp.lambdify(t, f_case_damped, 'numpy')\nF_jw_damped_func = sp.lambdify(w, F_jw_damped, 'numpy')\n\n# --- Generate Data ---\nt_values = np.linspace(0, 8, 500)\nf_values = f_damped_func(t_values)\n\nw_values = np.logspace(-1, 2, 500)\nF_jw_values = F_jw_damped_func(w_values)\nmagnitude = np.abs(F_jw_values)\nphase = np.angle(F_jw_values, deg=True)\n\n# --- Plotting (with raw strings for all labels) ---\nplt.figure(figsize=(10, 8))\n\nplt.subplot(3, 1, 1)\nplt.plot(t_values, f_values, color='blue')\nplt.title(r'Time Domain: Damped Sine Wave $f(t) = e^{-0.5t} \\sin(5t)$')\nplt.xlabel(r'Time (t)')\nplt.ylabel(r'Amplitude')\nplt.grid(True)\n\nplt.subplot(3, 1, 2)\nplt.loglog(w_values, magnitude, color='red')\nplt.title(r'Frequency Response: Magnitude Plot')\nplt.axvline(x=5, color='gray', linestyle='--', label=r'Natural Freq. ($\\omega_{0}$=5)')\nplt.xlabel(r'Frequency ($\\omega$) [rad/s]')\nplt.ylabel(r'|F(j$\\omega$)| (Gain)')\nplt.legend()\nplt.grid(True, which=\"both\", ls=\"-\")\n\nplt.subplot(3, 1, 3)\nplt.semilogx(w_values, phase, color='purple')\nplt.title(r'Frequency Response: Phase Plot')\nplt.axvline(x=5, color='gray', linestyle='--', label=r'Natural Freq. ($\\omega_{0}$=5)')\nplt.xlabel(r'Frequency ($\\omega$) [rad/s]')\nplt.ylabel(r'Phase (degrees)')\nplt.legend()\nplt.grid(True, which=\"both\", ls=\"-\")\n\nplt.tight_layout()\nplt.show()\n```\n\n>**Discussion of Challenge Solution**\n\n- Time Domain: The signal is a sine wave whose amplitude decays exponentially over time, which is exactly what we expect from the function.\n\n- Magnitude Plot: This plot shows a clear resonant peak. The gain is highest for input frequencies very close to the system's natural oscillation frequency, $\\omega_0=5$ rad/s. This means if you \"excite\" this system with a frequency of 5 rad/s, it will respond with the largest amplitude. This phenomenon is critical in understanding both mechanical resonance (e.g., why soldiers break step on bridges) and electrical resonance (e.g., tuning a radio).\n\n- Phase Plot: The phase experiences a very rapid shift of 180 degrees around the resonant frequency. It starts at 0 degrees (for very low frequencies), drops sharply to -180 degrees through the resonance point, indicating a complete inversion of the signal's phase. This sharp phase change is a key indicator of resonance in a system.\n\n>**Result**\n\nBy focusing on magnitude and phase, this experiment provides us with a much deeper and more practical understanding of the Laplace transform's role in engineering.\n\n\n---\n\n### Application Challenge 2: Combined Decay and Ramp Signal\n\n**Your Task:**\nConsider a signal that represents the voltage in a circuit with both a discharging capacitor component and a linearly increasing input voltage. The combined signal is given by:\n$$\nf(t) = A e^{-\\alpha t} + B t\n$$\n\nCompute and visualize the Laplace transform and frequency response for this function using the following parameters:\n\n*  `A = 5` (Initial amplitude of the exponential decay)\n*  $\\alpha = 2$ (Decay rate)\n*  `B = 3` (Slope of the ramp function)\n\nFollow the full algorithm to produce the time-domain plot and the full Bode plot (magnitude and phase).\n\n---\n\n### Solution to the Application Challenge 2\n\nHere is the complete Python code to solve the application challenge. We'll analyze how the combination of a decaying signal and a constantly growing ramp signal appears in the frequency domain.\n\n```{python}\n#| label: fig-laplace-combined-signal\n#| fig-cap: \"Analysis of a combined exponential decay and ramp signal.\"\n\n# --- Define symbols and parameters ---\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nt, s, w = sp.symbols('t s w', real=True, positive=True)\nA, alpha, B = sp.symbols('A alpha B', real=True, positive=True)\n\n# --- Define the function ---\nf_combined = A * sp.exp(-alpha * t) + B * t\n\n# --- Compute its Laplace Transform ---\n# SymPy can handle the sum directly due to the linearity of the transform\nF_s_combined = sp.laplace_transform(f_combined, t, s)[0]\n\n# --- Set parameters for our specific case ---\nparams = {A: 5, alpha: 2, B: 3}\nf_case_combined = f_combined.subs(params)\nF_s_case_combined = F_s_combined.subs(params)\n\n# --- Derive Frequency Response ---\nF_jw_combined = F_s_case_combined.subs(s, 1j * w)\n\n# --- Print the symbolic results ---\nprint(f\"Function: f(t) = {f_case_combined}\")\n# We can use simplify to combine the terms into a single fraction\nprint(f\"Laplace Transform: F(s) = {sp.simplify(F_s_case_combined)}\")\nprint(f\"Frequency Response: F(jω) = {F_jw_combined}\")\n\n# --- Lambdify for numerical evaluation ---\nf_combined_func = sp.lambdify(t, f_case_combined, 'numpy')\nF_jw_combined_func = sp.lambdify(w, F_jw_combined, 'numpy')\n\n# --- Generate Data ---\nt_values = np.linspace(0, 3, 400)\nf_values = f_combined_func(t_values)\n\n# Frequency range for plotting (logarithmic scale)\nw_values = np.logspace(-1, 2, 400) # From 0.1 to 100 rad/s\nF_jw_values = F_jw_combined_func(w_values)\n\n# Calculate Magnitude and Phase\nmagnitude = np.abs(F_jw_values)\nphase = np.angle(F_jw_values, deg=True)\n\n# --- Plotting ---\nplt.figure(figsize=(10, 8))\n\n# Plot f(t)\nplt.subplot(3, 1, 1)\nplt.plot(t_values, f_values, color='blue')\nplt.title(r'Time Domain: $f(t) = 5e^{-2t} + 3t$')\nplt.xlabel(r'Time (t)')\nplt.ylabel(r'Amplitude')\nplt.grid(True)\n\n# Plot Magnitude |F(jω)|\nplt.subplot(3, 1, 2)\nplt.loglog(w_values, magnitude, color='red')\nplt.title(r'Frequency Response: Magnitude Plot')\nplt.xlabel(r'Frequency ($\\omega$) [rad/s]')\nplt.ylabel(r'|F(j$\\omega$)| (Gain)')\nplt.grid(True, which=\"both\", ls=\"-\")\n\n# Plot Phase arg(F(jω))\nplt.subplot(3, 1, 3)\nplt.semilogx(w_values, phase, color='purple')\nplt.title(r'Frequency Response: Phase Plot')\nplt.xlabel(r'Frequency ($\\omega$) [rad/s]')\nplt.ylabel(r'Phase (degrees)')\nplt.grid(True, which=\"both\", ls=\"-\")\n\nplt.tight_layout()\nplt.show()\n```\n\n#### Results and Discussion of the Challenge\n\nThe symbolic computation confirms that the Laplace transform of  $f(t)=5e^{-2t}+3t$ is, $F(s)=\\frac{5}{s^2+2}+\\frac{2}{s^2}$. The frequency analysis reveals how these two components interact.\n\n- Time-Domain Plot: The plot shows the function starting at an amplitude of 5 (from the $Ae^{-at}$ \n term). For a short time, the function's value decreases as the exponential decay is stronger than the ramp's growth. However, as t increases, the decay term vanishes and the ramp term ($3t$) dominates, causing the signal to increase linearly.\n- Magnitude Plot: The magnitude plot is dominated by the ramp function at low frequencies. The \n$\\frac{1}{s^2}$ term in the transform results in a very high magnitude as $\\omega \\to 0$. This is because a ramp is a signal with infinite energy concentrated at the lowest frequencies (it never stops growing). The plot shows a steep roll-off, characteristic of this term. The influence of the exponential term \n$\\frac{5}{s+2}$ is seen as a \"shoulder\" in the plot around $\\omega=2$  rad/s, but it's a minor feature compared to the ramp's overwhelming low-frequency content.\n\n- Phase Plot: The phase plot is particularly interesting. At very low frequencies, the phase approaches -180 degrees. This is a direct consequence of the $\\frac{1}{s^2}$ term from the ramp. In the frequency domain, $s^2\\to (j\\omega)^2\\to -\\omega^2$. A negative real number has a phase of -180 degrees (or +180). As frequency increases, the phase begins to rise, influenced by the other term in the transform, whose phase is between 0 and -90 degrees. This shows the complex interplay between the phase characteristics of the two combined signals.\n\nThis analysis demonstrates how the frequency response can deconstruct a complex time-domain signal, revealing the distinct spectral \"fingerprints\" of its constituent parts.\n\n\n## Experiment 6: The Inverse Laplace Transform\n\nAfter analyzing a system or signal in the frequency domain, we often need to return to the time domain to understand the actual physical behavior—how voltage changes, how a robot arm moves, etc. The **Inverse Laplace Transform**, denoted $\\mathcal{L}^{-1}\\{F(s)\\}$, accomplishes this, converting a function $F(s)$ back into its time-domain equivalent, $f(t)$.\n\n### Aim\nTo compute the Inverse Laplace transform of given s-domain functions and to visualize the connection between the frequency-domain characteristics and the resulting time-domain signal.\n\n### Objectives\n*   To use `SymPy` to calculate the inverse Laplace transform of a given function $F(s)$.\n*   To analyze the frequency response (magnitude and phase) of the given $F(s)$.\n*   To plot the resulting time-domain function $f(t)$.\n*   To visually connect features in the frequency domain (like resonant peaks) to behaviors in the time domain (like oscillations).\n\n---\n\n### Algorithm\n\n1.  **Import Libraries:** Import `sympy`, `numpy`, and `matplotlib.pyplot`.\n2.  **Define Symbols:** Declare symbolic variables `s`, `t`, and `w`.\n3.  **Define Laplace-Domain Function:** Specify the s-domain function $F(s)$ as a symbolic expression.\n4.  **Analyze Frequency Response of F(s):**\n    *   Substitute $s = j\\omega$ to get the frequency response function $F(j\\omega)$.\n    *   Lambdify $F(j\\omega)$ to prepare for numerical plotting.\n    *   Generate a frequency array `w_values` and calculate the magnitude and phase of $F(j\\omega)$.\n5.  **Compute the Inverse Laplace Transform:**\n    *   Use `sp.inverse_laplace_transform(F, s, t)[0]` to find the time-domain function $f(t)$.\n    *   Lambdify the resulting symbolic expression $f(t)$.\n6.  **Plot and Visualize:** Create a set of plots to show the full picture:\n    *   The Magnitude plot of $F(j\\omega)$.\n    *   The Phase plot of $F(j\\omega)$.\n    *   The resulting time-domain plot of $f(t)$.\n\n---\n\n### Case Study: An Ideal Resonator\n\n**Problem:** You are given the s-domain function $F(s) = \\frac{1}{s^2 + 1}$. This is the transfer function of an ideal, undamped second-order system (like a frictionless mass-spring or a lossless LC circuit). Analyze its frequency response and find its impulse response in the time domain by computing the inverse Laplace transform.\n\n**Theoretical Result:** This is the classic transform pair for $\\sin(t)$.\n\n```{python}\n#| label: fig-inv-laplace-sin\n#| fig-cap: \"Bode Plot of F(s) = 1/(s^2+1) and its corresponding time-domain response, f(t)=sin(t).\"\n\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# --- 1. & 2. Define symbols ---\ns, t, w = sp.symbols('s t w', real=True, positive=True)\n\n# --- 3. Define Laplace-domain function ---\nF_s = 1 / (s**2 + 1)\n\n# --- 4. Analyze Frequency Response of F(s) ---\nF_jw = F_s.subs(s, 1j * w)\nF_jw_func = sp.lambdify(w, F_jw, 'numpy')\n\nw_values = np.logspace(-1, 2, 500)\nF_jw_values = F_jw_func(w_values)\nmagnitude = np.abs(F_jw_values)\nphase = np.angle(F_jw_values, deg=True)\n\n# --- 5. Compute Inverse Laplace Transform ---\nf_t = sp.inverse_laplace_transform(F_s, s, t, noconds=True)\nf_t_func = sp.lambdify(t, f_t, 'numpy')\n\nprint(f\"The given F(s) is: {F_s}\")\nprint(f\"The computed Inverse Laplace Transform f(t) is: {f_t}\")\n\n# --- 6. Plotting ---\nt_values = np.linspace(0, 10, 500)\n\nplt.figure(figsize=(10, 8))\n\n# Plot Magnitude\nplt.subplot(3, 1, 1)\nplt.loglog(w_values, magnitude, color='red')\nplt.title(r'Frequency Response of $F(s)$: Magnitude')\nplt.ylabel(r'|F(j$\\omega$)| (Gain)')\nplt.axvline(x=1, color='gray', linestyle='--', label=r'Resonant Freq. ($\\omega$=1)')\nplt.grid(True, which=\"both\", ls=\"-\")\nplt.legend()\n\n# Plot Phase\nplt.subplot(3, 1, 2)\nplt.semilogx(w_values, phase, color='purple')\nplt.title(r'Frequency Response of $F(s)$: Phase')\nplt.ylabel(r'Phase (degrees)')\nplt.axvline(x=1, color='gray', linestyle='--', label=r'Resonant Freq. ($\\omega$=1)')\nplt.grid(True, which=\"both\", ls=\"-\")\nplt.legend()\n\n# Plot Time-domain response f(t)\nplt.subplot(3, 1, 3)\nplt.plot(t_values, f_t_func(t_values), color='blue')\nplt.title(r'Resulting Time-Domain Function: $f(t) = \\mathcal{L}^{-1}\\{F(s)\\}$')\nplt.xlabel(r'Time (t)')\nplt.ylabel(r'$f(t)$')\nplt.grid(True)\n\nplt.tight_layout()\nplt.show()\n```\n\n#### Results and Discussion\n\nThis example provides a perfect illustration of the connection between the frequency and time domains.\n\n- Frequency Domain Analysis: The magnitude plot shows an infinitely sharp resonant peak at $\\omega=1$\n rad/s. This tells us the system is extremely sensitive to inputs at this specific frequency and will have a massive response. The phase plot shows an instantaneous 180-degree flip at $\\omega=1$, another hallmark of ideal resonance.\n- Time Domain Result: The inverse Laplace transform correctly yields $f(t)=sin(t)$. The plot of this function is an undamped sine wave that oscillates forever. This is the time-domain manifestation of the infinite resonant peak seen in the frequency domain. An undamped system, when \"hit\" by an impulse, will oscillate at its natural frequency indefinitely.\n\n## Application Challenge: Step Response of an RLC Circuit\n\nProblem: Consider a series RLC circuit which is initially at rest (zero initial conditions). A step voltage of 5 volts is applied at $t=0$. Determine the step response of the circuit, i.e., the current \n$i(t)$ as a function of time, using the inverse Laplace transform method. Use the following component values:\n\n- Resistance (R): 10 Ω\n- Inductance (L): 0.1 H\n- Capacitance (C): 0.001 F (1 mF)\n\n\n>**Circuit Analysis**\n\nFor a series RLC circuit, Kirchhoff's Voltage Law (KVL) gives:\n\n$$\nL \\frac{di(t)}{dt} + R i(t) + \\frac{1}{C} \\int_0^t i(\\tau) \\, d\\tau = v_s(t)\n$$\n\nTaking the Laplace transform of the entire equation (with zero initial conditions):\n\n$$\nsLI(s) + RI(s) + \\frac{1}{sC}I(s) = V(s)\n$$\n\nThe input is a step voltage of 5V, so $v_s(t) = 5u(t)$, and its transform is $V(s) = \\frac{5}{s}$. Substituting for $V(s)$ and solving for the current $I(s)$:\n\n$$\nI(s) \\left( sL + R + \\frac{1}{sC} \\right) = \\frac{5}{s} \\implies I(s) = \\frac{\\frac{5}{s}}{sL + R + \\frac{1}{sC}}\n$$\n\nSimplifying this expression gives us the function we need to find the inverse transform of:\n\n$$\nI(s) = \\frac{5/L}{s^2 + \\frac{R}{L}s + \\frac{1}{LC}}\n$$\n\n```{python}\n#| label: fig-inv-laplace-rlc\n#| fig-cap: \"The current i(t) in an RLC circuit after a 5V step input is applied.\"\n\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# --- Define symbols and parameters ---\ns, t = sp.symbols('s t', real=True, positive=True)\nR_val, L_val, C_val, V_val = 10, 0.1, 0.001, 5\n\n# --- Define the s-domain function I(s) ---\n# Derived from the circuit analysis above\nI_s = (V_val / L_val) / (s**2 + (R_val / L_val) * s + 1 / (L_val * C_val))\nprint(f\"The s-domain expression for the current is I(s) =\")\nsp.pprint(I_s)\n\n# --- Compute the Inverse Laplace Transform to find i(t) ---\n# <<<<<<<<<<<<<<<<<<<< FIX IS HERE: Add noconds=True <<<<<<<<<<<<<<<<<<<<\ni_t = sp.inverse_laplace_transform(I_s, s, t, noconds=True)\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nprint(\"\\nThe time-domain expression for the current is i(t) =\")\nsp.pprint(i_t)\n\n# --- Lambdify for plotting ---\ni_t_func = sp.lambdify(t, i_t, 'numpy')\n\n# --- Generate time values and plot ---\nt_values = np.linspace(0, 0.1, 500) # The action happens quickly\ni_values = i_t_func(t_values)\n\nplt.figure(figsize=(10, 5))\nplt.plot(t_values, i_values, color='blue')\nplt.title(r'RLC Circuit Step Response: Current $i(t)$')\nplt.xlabel(r'Time (t) [seconds]')\nplt.ylabel(r'Current (i) [Amps]')\nplt.grid(True)\nplt.show()\n```\n\n#### Discussion of RLC Circuit Result\n\n\nThe inverse Laplace transform provides the exact analytical solution for the current $i(t)$\nin the circuit.\n\n- Underdamped Response: The plot shows a classic underdamped response. When the voltage is applied, the current surges to a peak, overshoots the final steady-state value, and then oscillates with decreasing amplitude until it settles.\n\n- Steady-State Behavior: As $t\\to \\infty$, the current $i(t)\\to 0$. This is physically correct. In a DC circuit, after the initial transient period, the inductor acts like a short circuit (a wire) and the capacitor acts as an open circuit. Since the capacitor blocks the DC current in the steady state, the final current must be zero.\n\n- Connection to System Poles: The oscillatory behavior is due to the complex conjugate poles of the denominator of $I(s)$. If the poles were real and distinct, the response would be overdamped (no oscillation). If the poles were real and repeated, it would be critically damped. This problem beautifully demonstrates how the mathematical properties of $F(s)$ directly dictate the physical nature of $f(t)$.\n\n\n","srcMarkdownNoYaml":"\n\n\n## Experiment 5: The Laplace Transform and Frequency Response\n\nThe Laplace Transform is a powerful mathematical tool used extensively in circuit analysis, control systems, and signal processing. It transforms a function from the time domain, $f(t)$, into the frequency domain, $F(s)$.\n\nWhile this is useful for solving differential equations, its true power in engineering comes from analyzing the **frequency response**. By setting the complex variable $s = j\\omega$ (where $j$ is the imaginary unit and $\\omega$ is angular frequency), we can see how a system or signal behaves at different frequencies. This is analyzed through two key plots: the **Magnitude Plot** and the **Phase Plot**.\n\n### Aim\nTo compute the Laplace transform of given functions and, most importantly, to visualize and interpret their frequency response through magnitude and phase plots.\n\n### Objectives\n*   To use Python's `SymPy` library for symbolic Laplace transforms.\n*   To understand how to obtain the frequency response function $F(j\\omega)$ from the Laplace transform $F(s)$.\n*   To generate and interpret magnitude and phase plots.\n*   To connect these plots to physical concepts like amplification, attenuation, and time delay (phase shift).\n\n---\n\n### Algorithm\n\n1.  **Define Symbols:** Use `sp.symbols()` to declare symbolic variables `t` (time), `s` (Laplace variable), and `w` (frequency, $\\omega$).\n2.  **Define the Function:** Specify the time-domain function $f(t)$ as a symbolic expression.\n3.  **Compute Laplace Transform:** Use `sp.laplace_transform()` to find the corresponding $F(s)$.\n4.  **Derive Frequency Response:** Substitute $s = j\\omega$ into the symbolic expression for $F(s)$ to get the frequency response function $F(j\\omega)$.\n5.  **Prepare for Plotting:** Convert the symbolic expressions for $f(t)$ and $F(j\\omega)$ into fast numerical functions using `sp.lambdify()`.\n6.  **Generate Data:**\n    *   Create a numerical array of time points `t_values`.\n    *   Create a logarithmic array of frequency points `w_values` using `np.logspace()`.\n    *   Calculate the complex values of $F(j\\omega)$ for the frequency range.\n7.  **Calculate Magnitude and Phase:**\n    *   Magnitude: `np.abs(F_jw_values)`\n    *   Phase: `np.angle(F_jw_values, deg=True)` (in degrees for easier interpretation)\n8.  **Plot:** Create three subplots: the time-domain signal, the magnitude plot (log-log scale), and the phase plot (log-x scale). This set of frequency plots is known as a **Bode Plot**.\n\n---\n\n### Case Study: An RC Low-Pass Filter's Impulse Response\n\n**Problem:** The voltage response of a simple RC low-pass filter to a sharp input (an impulse) is an exponential decay function, $f(t) = e^{-at}$, where $a = 1/RC$. Let's analyze this signal for $a=1$.\n\n**Physical Interpretation:**\n*   **Magnitude `|F(jω)|`:** Tells us how much the filter will pass or block a sine wave of frequency $\\omega$.\n*   **Phase `arg(F(jω))`:** Tells us how much the filter will delay a sine wave of frequency $\\omega$.\n\n```{python}\n#| label: fig-laplace-exp-bode\n#| fig-cap: \"Time-domain plot of an exponential decay and its corresponding Bode Plot (Magnitude and Phase).\"\n\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# --- 1. Define symbols ---\nt, s, w = sp.symbols('t s w', real=True, positive=True)\na = sp.Symbol('a', real=True, positive=True)\n\n# --- 2. Define the function ---\nf = sp.exp(-a*t)\n\n# --- 3. Compute Laplace Transform ---\nF_s = sp.laplace_transform(f, t, s, noconds=True)\n\n# --- Set parameter for our specific case ---\nf_case = f.subs(a, 1)\nF_s_case = F_s.subs(a, 1)\n\n# --- 4. Derive Frequency Response ---\nF_jw = F_s_case.subs(s, 1j * w)\n\n# --- Print the symbolic results ---\nprint(f\"Function: f(t) = {f_case}\")\nprint(f\"Laplace Transform: F(s) = {F_s_case}\")\nprint(f\"Frequency Response: F(jω) = {F_jw}\")\n\n# --- 5. Lambdify for numerical evaluation ---\nf_func = sp.lambdify(t, f_case, 'numpy')\nF_jw_func = sp.lambdify(w, F_jw, 'numpy')\n\n# --- 6. & 7. Generate Data and Calculate Mag/Phase ---\nt_values = np.linspace(0, 5, 400)\nf_values = f_func(t_values)\n\nw_values = np.logspace(-1, 2, 400) # From 0.1 to 100 rad/s\nF_jw_values = F_jw_func(w_values)\n\nmagnitude = np.abs(F_jw_values)\nphase = np.angle(F_jw_values, deg=True)\n\n# --- 8. Plotting ---\nplt.figure(figsize=(10, 8))\n\n# Plot f(t)\nplt.subplot(3, 1, 1)\nplt.plot(t_values, f_values, color='blue')\nplt.title('Time Domain: $f(t) = e^{-t}$ (Impulse Response of RC Filter)')\nplt.xlabel('Time (t)')\nplt.ylabel('Amplitude')\nplt.grid(True)\n\n# Plot Magnitude |F(jω)|\nplt.subplot(3, 1, 2)\nplt.loglog(w_values, magnitude, color='red')\nplt.title('Frequency Response: Magnitude Plot')\nplt.xlabel('Frequency (ω) [rad/s]')\nplt.ylabel('|F(jω)| (Gain)')\nplt.grid(True, which=\"both\", ls=\"-\")\n\n# Plot Phase arg(F(jω))\nplt.subplot(3, 1, 3)\nplt.semilogx(w_values, phase, color='purple')\nplt.title('Frequency Response: Phase Plot')\nplt.xlabel('Frequency (ω) [rad/s]')\nplt.ylabel('Phase (degrees)')\nplt.grid(True, which=\"both\", ls=\"-\")\n\nplt.tight_layout()\nplt.show()\n```\n\n### Results and Discussion\n\n- Time Domain: The function $e^{-t}$ shows a sharp start at 1, followed by a slow decay.\n\n- Magnitude Plot: This plot clearly shows the behavior of a low-pass filter. At low frequencies (e.g., \n$\\omega<1$), the magnitude (gain) is close to 1, meaning these signals are passed through without attenuation. As frequency increases, the magnitude rolls off, indicating that high-frequency signals are blocked. The \"corner frequency\" where the roll-off begins is at $\\omega=1/a=1$ rad/s.\n\n- Phase Plot: At very low frequencies, the phase shift is near 0 degrees. As the frequency approaches the corner frequency, the phase lag increases, reaching -45 degrees at $\\omega=1$ rad/s. At very high frequencies, the phase shift approaches -90 degrees, meaning a high-frequency sine wave passing through this filter will be delayed by a quarter of its cycle. This delay is a fundamental property of physical systems like filters.\n\n### Application Challenge 1: A Damped Oscillator\n\nYour Task: Analyze a signal representing a damped sine wave, which is characteristic of many mechanical and electrical systems that oscillate but lose energy over time (e.g., a mass on a spring with friction, or an RLC circuit). The function is given by: $f(t)=e^{-at}\\sin(\\omega t)$.\nUse the following parameters: $a = 0.5$ (Damping factor), $\\omega_0 =5$ rad/s (Natural oscillation frequency). Follow the full algorithm to produce the time-domain plot and the full Bode plot (magnitude and phase). \n\n\n>**Solution to the Application Challenge**\n\n```{python}\n#| label: fig-laplace-damped-sine\n#| fig-cap: \"Analysis of a damped sine wave, showing a resonant peak in its frequency response.\"\n\n# --- Define symbols and parameters ---\nt, s, w = sp.symbols('t s w', real=True, positive=True)\na = sp.Symbol('a', real=True, positive=True)\nw0 = sp.Symbol('w0', real=True, positive=True)\n\n# --- Define the function ---\nf_damped = sp.exp(-a*t) * sp.sin(w0*t)\n\n# --- Compute its Laplace Transform using the frequency shift theorem ---\n# The transform of e^(-at)f(t) is F(s+a)\nF_s_damped = sp.laplace_transform(sp.sin(w0*t), t, s)[0].subs(s, s + a)\n\n# --- Set parameters for our specific case ---\nparams = {a: 0.5, w0: 5}\nf_case_damped = f_damped.subs(params)\nF_s_case_damped = F_s_damped.subs(params)\n\n# --- Derive Frequency Response ---\nF_jw_damped = F_s_case_damped.subs(s, 1j * w)\n\n# --- Print the symbolic results ---\nprint(f\"Function: f(t) = {f_case_damped}\")\nprint(f\"Laplace Transform: F(s) = {sp.simplify(F_s_case_damped)}\")\nprint(f\"Frequency Response: F(jω) = {F_jw_damped}\")\n\n# --- Lambdify for numerical evaluation ---\nf_damped_func = sp.lambdify(t, f_case_damped, 'numpy')\nF_jw_damped_func = sp.lambdify(w, F_jw_damped, 'numpy')\n\n# --- Generate Data ---\nt_values = np.linspace(0, 8, 500)\nf_values = f_damped_func(t_values)\n\nw_values = np.logspace(-1, 2, 500)\nF_jw_values = F_jw_damped_func(w_values)\nmagnitude = np.abs(F_jw_values)\nphase = np.angle(F_jw_values, deg=True)\n\n# --- Plotting (with raw strings for all labels) ---\nplt.figure(figsize=(10, 8))\n\nplt.subplot(3, 1, 1)\nplt.plot(t_values, f_values, color='blue')\nplt.title(r'Time Domain: Damped Sine Wave $f(t) = e^{-0.5t} \\sin(5t)$')\nplt.xlabel(r'Time (t)')\nplt.ylabel(r'Amplitude')\nplt.grid(True)\n\nplt.subplot(3, 1, 2)\nplt.loglog(w_values, magnitude, color='red')\nplt.title(r'Frequency Response: Magnitude Plot')\nplt.axvline(x=5, color='gray', linestyle='--', label=r'Natural Freq. ($\\omega_{0}$=5)')\nplt.xlabel(r'Frequency ($\\omega$) [rad/s]')\nplt.ylabel(r'|F(j$\\omega$)| (Gain)')\nplt.legend()\nplt.grid(True, which=\"both\", ls=\"-\")\n\nplt.subplot(3, 1, 3)\nplt.semilogx(w_values, phase, color='purple')\nplt.title(r'Frequency Response: Phase Plot')\nplt.axvline(x=5, color='gray', linestyle='--', label=r'Natural Freq. ($\\omega_{0}$=5)')\nplt.xlabel(r'Frequency ($\\omega$) [rad/s]')\nplt.ylabel(r'Phase (degrees)')\nplt.legend()\nplt.grid(True, which=\"both\", ls=\"-\")\n\nplt.tight_layout()\nplt.show()\n```\n\n>**Discussion of Challenge Solution**\n\n- Time Domain: The signal is a sine wave whose amplitude decays exponentially over time, which is exactly what we expect from the function.\n\n- Magnitude Plot: This plot shows a clear resonant peak. The gain is highest for input frequencies very close to the system's natural oscillation frequency, $\\omega_0=5$ rad/s. This means if you \"excite\" this system with a frequency of 5 rad/s, it will respond with the largest amplitude. This phenomenon is critical in understanding both mechanical resonance (e.g., why soldiers break step on bridges) and electrical resonance (e.g., tuning a radio).\n\n- Phase Plot: The phase experiences a very rapid shift of 180 degrees around the resonant frequency. It starts at 0 degrees (for very low frequencies), drops sharply to -180 degrees through the resonance point, indicating a complete inversion of the signal's phase. This sharp phase change is a key indicator of resonance in a system.\n\n>**Result**\n\nBy focusing on magnitude and phase, this experiment provides us with a much deeper and more practical understanding of the Laplace transform's role in engineering.\n\n\n---\n\n### Application Challenge 2: Combined Decay and Ramp Signal\n\n**Your Task:**\nConsider a signal that represents the voltage in a circuit with both a discharging capacitor component and a linearly increasing input voltage. The combined signal is given by:\n$$\nf(t) = A e^{-\\alpha t} + B t\n$$\n\nCompute and visualize the Laplace transform and frequency response for this function using the following parameters:\n\n*  `A = 5` (Initial amplitude of the exponential decay)\n*  $\\alpha = 2$ (Decay rate)\n*  `B = 3` (Slope of the ramp function)\n\nFollow the full algorithm to produce the time-domain plot and the full Bode plot (magnitude and phase).\n\n---\n\n### Solution to the Application Challenge 2\n\nHere is the complete Python code to solve the application challenge. We'll analyze how the combination of a decaying signal and a constantly growing ramp signal appears in the frequency domain.\n\n```{python}\n#| label: fig-laplace-combined-signal\n#| fig-cap: \"Analysis of a combined exponential decay and ramp signal.\"\n\n# --- Define symbols and parameters ---\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nt, s, w = sp.symbols('t s w', real=True, positive=True)\nA, alpha, B = sp.symbols('A alpha B', real=True, positive=True)\n\n# --- Define the function ---\nf_combined = A * sp.exp(-alpha * t) + B * t\n\n# --- Compute its Laplace Transform ---\n# SymPy can handle the sum directly due to the linearity of the transform\nF_s_combined = sp.laplace_transform(f_combined, t, s)[0]\n\n# --- Set parameters for our specific case ---\nparams = {A: 5, alpha: 2, B: 3}\nf_case_combined = f_combined.subs(params)\nF_s_case_combined = F_s_combined.subs(params)\n\n# --- Derive Frequency Response ---\nF_jw_combined = F_s_case_combined.subs(s, 1j * w)\n\n# --- Print the symbolic results ---\nprint(f\"Function: f(t) = {f_case_combined}\")\n# We can use simplify to combine the terms into a single fraction\nprint(f\"Laplace Transform: F(s) = {sp.simplify(F_s_case_combined)}\")\nprint(f\"Frequency Response: F(jω) = {F_jw_combined}\")\n\n# --- Lambdify for numerical evaluation ---\nf_combined_func = sp.lambdify(t, f_case_combined, 'numpy')\nF_jw_combined_func = sp.lambdify(w, F_jw_combined, 'numpy')\n\n# --- Generate Data ---\nt_values = np.linspace(0, 3, 400)\nf_values = f_combined_func(t_values)\n\n# Frequency range for plotting (logarithmic scale)\nw_values = np.logspace(-1, 2, 400) # From 0.1 to 100 rad/s\nF_jw_values = F_jw_combined_func(w_values)\n\n# Calculate Magnitude and Phase\nmagnitude = np.abs(F_jw_values)\nphase = np.angle(F_jw_values, deg=True)\n\n# --- Plotting ---\nplt.figure(figsize=(10, 8))\n\n# Plot f(t)\nplt.subplot(3, 1, 1)\nplt.plot(t_values, f_values, color='blue')\nplt.title(r'Time Domain: $f(t) = 5e^{-2t} + 3t$')\nplt.xlabel(r'Time (t)')\nplt.ylabel(r'Amplitude')\nplt.grid(True)\n\n# Plot Magnitude |F(jω)|\nplt.subplot(3, 1, 2)\nplt.loglog(w_values, magnitude, color='red')\nplt.title(r'Frequency Response: Magnitude Plot')\nplt.xlabel(r'Frequency ($\\omega$) [rad/s]')\nplt.ylabel(r'|F(j$\\omega$)| (Gain)')\nplt.grid(True, which=\"both\", ls=\"-\")\n\n# Plot Phase arg(F(jω))\nplt.subplot(3, 1, 3)\nplt.semilogx(w_values, phase, color='purple')\nplt.title(r'Frequency Response: Phase Plot')\nplt.xlabel(r'Frequency ($\\omega$) [rad/s]')\nplt.ylabel(r'Phase (degrees)')\nplt.grid(True, which=\"both\", ls=\"-\")\n\nplt.tight_layout()\nplt.show()\n```\n\n#### Results and Discussion of the Challenge\n\nThe symbolic computation confirms that the Laplace transform of  $f(t)=5e^{-2t}+3t$ is, $F(s)=\\frac{5}{s^2+2}+\\frac{2}{s^2}$. The frequency analysis reveals how these two components interact.\n\n- Time-Domain Plot: The plot shows the function starting at an amplitude of 5 (from the $Ae^{-at}$ \n term). For a short time, the function's value decreases as the exponential decay is stronger than the ramp's growth. However, as t increases, the decay term vanishes and the ramp term ($3t$) dominates, causing the signal to increase linearly.\n- Magnitude Plot: The magnitude plot is dominated by the ramp function at low frequencies. The \n$\\frac{1}{s^2}$ term in the transform results in a very high magnitude as $\\omega \\to 0$. This is because a ramp is a signal with infinite energy concentrated at the lowest frequencies (it never stops growing). The plot shows a steep roll-off, characteristic of this term. The influence of the exponential term \n$\\frac{5}{s+2}$ is seen as a \"shoulder\" in the plot around $\\omega=2$  rad/s, but it's a minor feature compared to the ramp's overwhelming low-frequency content.\n\n- Phase Plot: The phase plot is particularly interesting. At very low frequencies, the phase approaches -180 degrees. This is a direct consequence of the $\\frac{1}{s^2}$ term from the ramp. In the frequency domain, $s^2\\to (j\\omega)^2\\to -\\omega^2$. A negative real number has a phase of -180 degrees (or +180). As frequency increases, the phase begins to rise, influenced by the other term in the transform, whose phase is between 0 and -90 degrees. This shows the complex interplay between the phase characteristics of the two combined signals.\n\nThis analysis demonstrates how the frequency response can deconstruct a complex time-domain signal, revealing the distinct spectral \"fingerprints\" of its constituent parts.\n\n\n## Experiment 6: The Inverse Laplace Transform\n\nAfter analyzing a system or signal in the frequency domain, we often need to return to the time domain to understand the actual physical behavior—how voltage changes, how a robot arm moves, etc. The **Inverse Laplace Transform**, denoted $\\mathcal{L}^{-1}\\{F(s)\\}$, accomplishes this, converting a function $F(s)$ back into its time-domain equivalent, $f(t)$.\n\n### Aim\nTo compute the Inverse Laplace transform of given s-domain functions and to visualize the connection between the frequency-domain characteristics and the resulting time-domain signal.\n\n### Objectives\n*   To use `SymPy` to calculate the inverse Laplace transform of a given function $F(s)$.\n*   To analyze the frequency response (magnitude and phase) of the given $F(s)$.\n*   To plot the resulting time-domain function $f(t)$.\n*   To visually connect features in the frequency domain (like resonant peaks) to behaviors in the time domain (like oscillations).\n\n---\n\n### Algorithm\n\n1.  **Import Libraries:** Import `sympy`, `numpy`, and `matplotlib.pyplot`.\n2.  **Define Symbols:** Declare symbolic variables `s`, `t`, and `w`.\n3.  **Define Laplace-Domain Function:** Specify the s-domain function $F(s)$ as a symbolic expression.\n4.  **Analyze Frequency Response of F(s):**\n    *   Substitute $s = j\\omega$ to get the frequency response function $F(j\\omega)$.\n    *   Lambdify $F(j\\omega)$ to prepare for numerical plotting.\n    *   Generate a frequency array `w_values` and calculate the magnitude and phase of $F(j\\omega)$.\n5.  **Compute the Inverse Laplace Transform:**\n    *   Use `sp.inverse_laplace_transform(F, s, t)[0]` to find the time-domain function $f(t)$.\n    *   Lambdify the resulting symbolic expression $f(t)$.\n6.  **Plot and Visualize:** Create a set of plots to show the full picture:\n    *   The Magnitude plot of $F(j\\omega)$.\n    *   The Phase plot of $F(j\\omega)$.\n    *   The resulting time-domain plot of $f(t)$.\n\n---\n\n### Case Study: An Ideal Resonator\n\n**Problem:** You are given the s-domain function $F(s) = \\frac{1}{s^2 + 1}$. This is the transfer function of an ideal, undamped second-order system (like a frictionless mass-spring or a lossless LC circuit). Analyze its frequency response and find its impulse response in the time domain by computing the inverse Laplace transform.\n\n**Theoretical Result:** This is the classic transform pair for $\\sin(t)$.\n\n```{python}\n#| label: fig-inv-laplace-sin\n#| fig-cap: \"Bode Plot of F(s) = 1/(s^2+1) and its corresponding time-domain response, f(t)=sin(t).\"\n\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# --- 1. & 2. Define symbols ---\ns, t, w = sp.symbols('s t w', real=True, positive=True)\n\n# --- 3. Define Laplace-domain function ---\nF_s = 1 / (s**2 + 1)\n\n# --- 4. Analyze Frequency Response of F(s) ---\nF_jw = F_s.subs(s, 1j * w)\nF_jw_func = sp.lambdify(w, F_jw, 'numpy')\n\nw_values = np.logspace(-1, 2, 500)\nF_jw_values = F_jw_func(w_values)\nmagnitude = np.abs(F_jw_values)\nphase = np.angle(F_jw_values, deg=True)\n\n# --- 5. Compute Inverse Laplace Transform ---\nf_t = sp.inverse_laplace_transform(F_s, s, t, noconds=True)\nf_t_func = sp.lambdify(t, f_t, 'numpy')\n\nprint(f\"The given F(s) is: {F_s}\")\nprint(f\"The computed Inverse Laplace Transform f(t) is: {f_t}\")\n\n# --- 6. Plotting ---\nt_values = np.linspace(0, 10, 500)\n\nplt.figure(figsize=(10, 8))\n\n# Plot Magnitude\nplt.subplot(3, 1, 1)\nplt.loglog(w_values, magnitude, color='red')\nplt.title(r'Frequency Response of $F(s)$: Magnitude')\nplt.ylabel(r'|F(j$\\omega$)| (Gain)')\nplt.axvline(x=1, color='gray', linestyle='--', label=r'Resonant Freq. ($\\omega$=1)')\nplt.grid(True, which=\"both\", ls=\"-\")\nplt.legend()\n\n# Plot Phase\nplt.subplot(3, 1, 2)\nplt.semilogx(w_values, phase, color='purple')\nplt.title(r'Frequency Response of $F(s)$: Phase')\nplt.ylabel(r'Phase (degrees)')\nplt.axvline(x=1, color='gray', linestyle='--', label=r'Resonant Freq. ($\\omega$=1)')\nplt.grid(True, which=\"both\", ls=\"-\")\nplt.legend()\n\n# Plot Time-domain response f(t)\nplt.subplot(3, 1, 3)\nplt.plot(t_values, f_t_func(t_values), color='blue')\nplt.title(r'Resulting Time-Domain Function: $f(t) = \\mathcal{L}^{-1}\\{F(s)\\}$')\nplt.xlabel(r'Time (t)')\nplt.ylabel(r'$f(t)$')\nplt.grid(True)\n\nplt.tight_layout()\nplt.show()\n```\n\n#### Results and Discussion\n\nThis example provides a perfect illustration of the connection between the frequency and time domains.\n\n- Frequency Domain Analysis: The magnitude plot shows an infinitely sharp resonant peak at $\\omega=1$\n rad/s. This tells us the system is extremely sensitive to inputs at this specific frequency and will have a massive response. The phase plot shows an instantaneous 180-degree flip at $\\omega=1$, another hallmark of ideal resonance.\n- Time Domain Result: The inverse Laplace transform correctly yields $f(t)=sin(t)$. The plot of this function is an undamped sine wave that oscillates forever. This is the time-domain manifestation of the infinite resonant peak seen in the frequency domain. An undamped system, when \"hit\" by an impulse, will oscillate at its natural frequency indefinitely.\n\n## Application Challenge: Step Response of an RLC Circuit\n\nProblem: Consider a series RLC circuit which is initially at rest (zero initial conditions). A step voltage of 5 volts is applied at $t=0$. Determine the step response of the circuit, i.e., the current \n$i(t)$ as a function of time, using the inverse Laplace transform method. Use the following component values:\n\n- Resistance (R): 10 Ω\n- Inductance (L): 0.1 H\n- Capacitance (C): 0.001 F (1 mF)\n\n\n>**Circuit Analysis**\n\nFor a series RLC circuit, Kirchhoff's Voltage Law (KVL) gives:\n\n$$\nL \\frac{di(t)}{dt} + R i(t) + \\frac{1}{C} \\int_0^t i(\\tau) \\, d\\tau = v_s(t)\n$$\n\nTaking the Laplace transform of the entire equation (with zero initial conditions):\n\n$$\nsLI(s) + RI(s) + \\frac{1}{sC}I(s) = V(s)\n$$\n\nThe input is a step voltage of 5V, so $v_s(t) = 5u(t)$, and its transform is $V(s) = \\frac{5}{s}$. Substituting for $V(s)$ and solving for the current $I(s)$:\n\n$$\nI(s) \\left( sL + R + \\frac{1}{sC} \\right) = \\frac{5}{s} \\implies I(s) = \\frac{\\frac{5}{s}}{sL + R + \\frac{1}{sC}}\n$$\n\nSimplifying this expression gives us the function we need to find the inverse transform of:\n\n$$\nI(s) = \\frac{5/L}{s^2 + \\frac{R}{L}s + \\frac{1}{LC}}\n$$\n\n```{python}\n#| label: fig-inv-laplace-rlc\n#| fig-cap: \"The current i(t) in an RLC circuit after a 5V step input is applied.\"\n\nimport sympy as sp\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# --- Define symbols and parameters ---\ns, t = sp.symbols('s t', real=True, positive=True)\nR_val, L_val, C_val, V_val = 10, 0.1, 0.001, 5\n\n# --- Define the s-domain function I(s) ---\n# Derived from the circuit analysis above\nI_s = (V_val / L_val) / (s**2 + (R_val / L_val) * s + 1 / (L_val * C_val))\nprint(f\"The s-domain expression for the current is I(s) =\")\nsp.pprint(I_s)\n\n# --- Compute the Inverse Laplace Transform to find i(t) ---\n# <<<<<<<<<<<<<<<<<<<< FIX IS HERE: Add noconds=True <<<<<<<<<<<<<<<<<<<<\ni_t = sp.inverse_laplace_transform(I_s, s, t, noconds=True)\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nprint(\"\\nThe time-domain expression for the current is i(t) =\")\nsp.pprint(i_t)\n\n# --- Lambdify for plotting ---\ni_t_func = sp.lambdify(t, i_t, 'numpy')\n\n# --- Generate time values and plot ---\nt_values = np.linspace(0, 0.1, 500) # The action happens quickly\ni_values = i_t_func(t_values)\n\nplt.figure(figsize=(10, 5))\nplt.plot(t_values, i_values, color='blue')\nplt.title(r'RLC Circuit Step Response: Current $i(t)$')\nplt.xlabel(r'Time (t) [seconds]')\nplt.ylabel(r'Current (i) [Amps]')\nplt.grid(True)\nplt.show()\n```\n\n#### Discussion of RLC Circuit Result\n\n\nThe inverse Laplace transform provides the exact analytical solution for the current $i(t)$\nin the circuit.\n\n- Underdamped Response: The plot shows a classic underdamped response. When the voltage is applied, the current surges to a peak, overshoots the final steady-state value, and then oscillates with decreasing amplitude until it settles.\n\n- Steady-State Behavior: As $t\\to \\infty$, the current $i(t)\\to 0$. This is physically correct. In a DC circuit, after the initial transient period, the inductor acts like a short circuit (a wire) and the capacitor acts as an open circuit. Since the capacitor blocks the DC current in the steady state, the final current must be zero.\n\n- Connection to System Poles: The oscillatory behavior is due to the complex conjugate poles of the denominator of $I(s)$. If the poles were real and distinct, the response would be overdamped (no oscillation). If the poles were real and repeated, it would be critically damped. This problem beautifully demonstrates how the mathematical properties of $F(s)$ directly dictate the physical nature of $f(t)$.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"03-laplace-basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","theme":"cosmo","title":"Lab Session 3: Symbolic operations in Laplace Transform","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}